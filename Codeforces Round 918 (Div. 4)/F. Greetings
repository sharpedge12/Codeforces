

import java.io.*;
import java.net.CookieHandler;
import java.nio.file.attribute.UserDefinedFileAttributeView;
import java.util.*;


public class Main {

    static long MOD = 998244353;
    boolean MULTI_CASE = true;
    boolean ALWAYS_FLUSH = false;

    long check(long n , long mid , long l , long t){
        long weeks = (n - mid )+ ((mid)/7) ;
        long task = (long)(weeks-1)/7 + 1 ;
        if(task <= mid*2){
            return (long)(mid*l) + (long)(task*t);
        }else{
            return (long)(mid*l) + (long)(2*mid*t);
        }
    }

    // CODE GOES HEERE !!!!!!!!!!
    void go() {
        int n=nextInt();
        int[][] arr =new int[n][2];
        for(int i=0;i<n;i++)
        {
            arr[i][0]=nextInt();
            arr[i][1]=nextInt();
        }
        TreeMap<Integer,Integer> map=new TreeMap<>();
        for(int i=0;i<n;i++)
        {
            map.put(arr[i][1],arr[i][0]);
        }
        int j=0;
        for(int i:map.keySet()){
            arr[j][0]=map.get(i);
            arr[j][1]=i;
            j++;
        }
        long ans=0;
        int arr1[]=new int[n];
        for(int i=0;i<n;i++)
        {
            arr1[i]=arr[i][0];
        }
        int[] ans1=constructLowerArray(arr1,n);



        for(int i=0;i<n;i++)
        {
            ans+=ans1[i];
        }
        sl(ans);




    }

    static void merge(int[][] v, int[] ans, int l, int mid, int h)
    {

        int[][] t = new int[h - l + 1][2]; // temporary array for merging both halves
        int i = l;
        int j = mid + 1;
        int k = 0;

        while (i < mid + 1 && j <= h) {

            // v[i][0] is greater than all
            // the elements from j till h.
            if (v[i][0] > v[j][0]) {
                ans[v[i][1]] += (h - j + 1);
                t[k][0] = v[i][0];
                t[k][1] = v[i][1];
                i++;
            }
            else {
                t[k][0] = v[j][0];
                t[k][1] = v[j][1];
                j++;
            }
            k++;
        }

        // if any elements left in left array
        while (i <= mid) {
            t[k][0] = v[i][0];
            t[k][1] = v[i][1];
            k++;
            i++;
        }
        // if any elements left in right array
        while (j <= h) {
            t[k][0] = v[j][0];
            t[k][1] = v[j][1];
            k++;
            j++;
        }
        // putting elements back in main array in
        // descending order
        k = 0;
        for (i = l; i <= h; i++, k++) {
            v[i][0] = t[k][0];
            v[i][1] = t[k][1];
        }
    }

    static void mergesort(int[][] v, int[] ans, int i, int j)
    {
        if (i < j) {
            int mid = (i + j) / 2;

            // calling mergesort for left half
            mergesort(v, ans, i, mid);

            // calling mergesort for right half
            mergesort(v, ans, mid + 1, j);

            // merging both halves and generating answer
            merge(v, ans, i, mid, j);
        }
    }

    static int[] constructLowerArray(int[] arr, int n)
    {

        int[][] v = new int[n][2];
        // inserting elements and corresponding index
        // as pair
        for (int i = 0; i < n; i++) {
            v[i][0] = arr[i];
            v[i][1] = i;
        }

        // answer array for keeping count
        // initialized by 0,
        int[] ans = new int[n];

        // calling mergesort
        mergesort(v, ans, 0, n - 1);

        return ans;
    }





    // take arrays as input

    int[] inta(int N) {
        int[] ret = new int[N];
        for (int i = 0; i < N; i++)
            ret[i] = nextInt() ;
        return ret;
    }


    long[] longa(int N) {
        long[] ret = new long[N];
        for (int i = 0; i < N; i++)
            ret[i] = nextLong();
        return ret;
    }

    private void printArray(Object[] a) {
        for (Object o : a) {
            so(o + " ");
        }
        sl();
    }

    /**
     * Input.
     */
    InputStream inStream;
    byte[] inBuff = new byte[1024];
    int inBuffCursor = 0, inBuffLen = 0;

    boolean isVisibleChar(int c) {
        return 33 <= c && c <= 126;
    }

    boolean hasNextByte() {
        if (inBuffCursor < inBuffLen) return true;
        inBuffCursor = 0;
        try {
            inBuffLen = inStream.read(inBuff);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return inBuffLen > 0;
    }

    boolean hasNext() {
        while (hasNextByte() && !isVisibleChar(inBuff[inBuffCursor])) inBuffCursor++;
        return hasNextByte();
    }

    int nextByte() {
        return hasNextByte() ? inBuff[inBuffCursor++] : -1;
    }

    String next() {
        if (!hasNext()) throw new RuntimeException("no next.");
        StringBuilder sb = new StringBuilder();
        int b = nextByte();
        while (isVisibleChar(b)) {
            sb.appendCodePoint(b);
            b = nextByte();
        }
        return sb.toString();
    }

    long nextLong() {
        if (!hasNext()) throw new RuntimeException("no next.");
        long result = 0;
        boolean negative = false;
        int b = nextByte();
        if (b < '0') {
            if (b == '-') negative = true;
            else if (b != '+') throw new RuntimeException("long number must start with +/-.");
            b = nextByte();
        }
        while (isVisibleChar(b)) {
            if (b < '0' || b > '9') throw new RuntimeException("wrong digit in long:" + (char) b);
            // TODO: may overflow here, even if it is a valid Long, eg.-(1<<63).
            result = result * 10 + (b - '0');
            b = nextByte();
        }
        return negative ? -result : result;
    }

    int nextInt() {
        long x = nextLong();
        if (x < Integer.MIN_VALUE || x > Integer.MAX_VALUE)
            throw new RuntimeException("int overflow:" + x);
        return (int) x;
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    /**
     * Output.
     */
    PrintWriter printOut = new PrintWriter(System.out);

    void so(Object obj, boolean newLine) {
        if (newLine) printOut.println(obj);
        else printOut.print(obj);
        if (ALWAYS_FLUSH) printOut.flush();
    }

    void so(Object obj) {
        so(obj, false);
    }

    void sl(Object obj) {
        so(obj, true);
    }

    void sl() {
        sl("");
    }

    /**
     * Main.
     */
    void mainGo() {
        try {
            inStream = new FileInputStream("src/main.in");
            ALWAYS_FLUSH = true;
        } catch (Exception e) {
            inStream = System.in;
        }
        while (hasNext()) {
            if (MULTI_CASE) {
                int T = nextInt();
                if (T == 0) break;
                for (int i = 0; i < T; ++i) {
                    go();
                }
            } else {
                go();
            }
        }
        printOut.flush();
    }

    // -------------------------Other functions-------------------------
    // Time Complexity : log(n)
    static long fast_power_mod(long n, long mod) {
        long pow2 = 2;
        long res = 1;
        while (n > 0) {
            if (n % 2 == 1)
                res = (res % mod * pow2 % mod) % mod;
            pow2 = (pow2 % mod * pow2 % mod) % mod;
            n >>= 1;
        }
        return res;
    }

    // Time Complexity : n*r
    static long nCrModpDP(long n, long r, long p) {
        long c[] = new long[(int) r + 1];
        c[0] = 1;
        for (long j = 1; j <= n; j++) {
            for (long k = Math.min(j, r); k > 0; k--)
                c[(int) k] = (c[(int) k] % p + c[(int) k - 1] % p) % p;
        }
        return c[(int) r];
    }

    // Time Complexity : log(n)
    static long nCrModpLucas(long n, long r, long p) {
        if (r == 0)
            return 1;
        long ni = n % p;
        long ri = r % p;
        return (nCrModpLucas(n / p, r / p, p) % p * nCrModpDP(ni, ri, p) % p) % p;
    }

    // Time Complexity : log(mod)
    static long inverseMOD(long x, long mod) {
        if (mod == 0)
            return 1;
        if (mod % 2 == 1)
            return (x * inverseMOD(x, mod - 1)) % MOD;
        else
            return inverseMOD((x * x) % MOD, mod / 2);
    }

    // Time Complexity : log(max(a,b))
    static long bitwiseAND(long a, long b) {
        long shiftcount = 0;
        while (a != b && a > 0) {
            shiftcount++;
            a = a >> 1;
            b = b >> 1;
        }
        return (long) (a << shiftcount);
    }

    // Time Complexity : n*m
    static void dfs(int j, ArrayList<ArrayList<Integer>> al, boolean[] visited) {
        visited[j] = true;
        for (int x = 0; x < al.get(j).size(); x++) {
            if (!visited[al.get(j).get(x)])
                dfs(al.get(j).get(x), al, visited);
        }
    }

    // Time Complexity : log(n) for composite numbers, n for prime numbers
    static long getPrimeFactors(long n) {
        int x = 2;
        long count = 0;
        // ArrayList<Integer> al=new ArrayList<>();
        while (n > 1) {
            if (n % x == 0) {
                // if(!al.contains(x))
                // al.add(x);
                count++;
                n /= x;
            } else
                x++;
        }
        return count;
    }

    // Time Complexity : log(n)
    static ArrayList<Integer> primeFactorization(int x, int[] spf) {
        HashMap<Integer, Integer> map = new HashMap<>();
        ArrayList<Integer> al = new ArrayList<>();
        while (x != 1) {
            if (!al.contains(spf[x]))
                al.add(spf[x]);
            map.put(spf[x], map.getOrDefault(spf[x], 0) + 1);
            x /= spf[x];
        }
        return al;
        // return map;
    }

    // Time Complexity : n*10
    static int[][] getBitMap(int[] a) {
        int n = a.length;
        int[][] bit_map = new int[n][32];
        for (int j = 0; j < n; j++)
            Arrays.fill(bit_map[j], 0);
        int b[] = new int[n];
        for (int j = 0; j < n; j++)
            b[j] = a[j];
        for (int j = 0; j < n; j++) {
            int counter = 0;
            while (b[j] != 0) {
                bit_map[j][counter] = (int) b[j] % 2;
                b[j] /= 2;
                counter++;
            }
        }
        return bit_map;
    }

    // Time Complexity : n*log(log(n))
    static ArrayList<Integer> sieveOfEratosthenes(int n) {
        boolean prime[] = new boolean[n + 1];
        for (int j = 0; j <= n; j++)
            prime[j] = true;
        for (long p = 2; p * p <= n; p++) {
            if (prime[(int) p]) {
                for (long j = p * p; j <= n; j += p)
                    prime[(int) j] = false;
            }
        }
        ArrayList<Integer> hs = new ArrayList<>();
        for (long j = 2; j <= n; j++) {
            if (prime[(int) j])
                hs.add((int) j);
        }
        return hs;
    }

    // Time Complexity : n
    static boolean sortedIncreasing(int[] a) {
        int f = 0;
        for (int j = 1; j < a.length; j++) {
            if (a[j] < a[j - 1])
                f = 1;
        }
        return f == 0 ? true : false;
    }

    // Time Complexity : n
    static boolean sortedDecreasing(int[] a) {
        int f = 0;
        for (int j = 1; j < a.length; j++) {
            if (a[j] > a[j - 1])
                f = 1;
        }
        return f == 0 ? true : false;
    }

    // Time Complexity : sqrt(n)
    static ArrayList<Integer> getFactors(long n) {
        ArrayList<Integer> al = new ArrayList<>();
        // int count=0;
        for (long i = 1; i * i * i <= n; i++) {
            if (n % i == 0) {
                al.add((int) i);
                // count++;
                if (n / i != i) {
                    al.add((int) (n / i));
                    // count++;
                }
            }
        }
        return al;
        // return count;
    }

    // Time Complexity : n*log(n)
    static void sort(int[] a) {
        ArrayList<Integer> l = new ArrayList<>();
        for (int i : a)
            l.add(i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++)
            a[i] = l.get(i);
    }

    static void sort(char[] a) {
        ArrayList<Character> l = new ArrayList<>();
        for (char i : a)
            l.add(i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++)
            a[i] = l.get(i);
    }

    // Time Complexity : n*log(n)
    static void sort(long[] a) {
        ArrayList<Long> l = new ArrayList<>();
        for (long i : a)
            l.add(i);
        Collections.sort(l);
        for (int i = 0; i < a.length; i++)
            a[i] = l.get(i);
    }

    // Time Complexity : log(min(a,b))
    static long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    // Time Complexity : log(min(a,b))
    static long gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    // Time Complexity : log(min(a,b))
    static long lcm(long a, long b) {
        return ((a / gcd(a, b)) * b);
    }

    // Time Complexity : log(min(a,b))
    static long lcm(int a, int b) {
        return ((a / gcd(a, b)) * b);
    }

    // Time Complexity : log(n)
    static long floorSqrt(long x) {
        if (x == 0 || x == 1)
            return x;
        long l = 1;
        long r = (long) Math.sqrt(x) + 1;
        long ans = 0;
        while (l <= r) {
            long mid = l + (r - l) / 2;
            long curr = mid * mid;
            if (curr == x)
                return mid;
            else if (curr > 0 && curr <= x) {
                ans = mid;
                l = mid + 1;
            } else
                r = mid - 1;
        }
        return ans;
    }

    public static int binarySearch(long[] arr, int first, int last, long key) {
        int mid = (first + last) / 2;
        while (first <= last) {
            if (arr[mid] < key) {
                first = mid + 1;
            } else if (arr[mid] == key) {
                return mid;
            } else {
                last = mid - 1;
            }
            mid = (first + last) / 2;
        }
        return -1;
    }

    public static int binarySearchLow(int[] arr, int first, int last, int key) {
        int mid = (first + last) / 2;
        while (first <= last) {
            if (arr[mid] < key) {
                first = mid + 1;
            } else if (arr[mid] == key) {
                return arr[mid];
            } else {
                last = mid - 1;
            }
            mid = (first + last) / 2;
        }
        return arr[first];
    }

    public static int binarySearchHigh(int[] arr, int first, int last, int key) {
        int mid = (first + last) / 2;
        while (first <= last) {
            if (arr[mid] < key) {
                first = mid + 1;
            } else if (arr[mid] == key) {
                return arr[mid];
            } else {
                last = mid - 1;
            }
            mid = (first + last) / 2;
        }
        return arr[last];
    }


    // Time Complexity : log(n*logn)
    static long getRemainderSum(long[] a, long totalsum, int x) {
        long k = 0;
        outer:
        for (int mul = x; ; mul += x) {
            int l = 0;
            int r = a.length - 1;
            int index = -1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                if (a[mid] >= mul) {
                    index = mid;
                    r = mid - 1;
                } else
                    l = mid + 1;
            }
            if (index == -1)
                break outer;
            else
                k += a.length - index;
        }
        return (totalsum - k * x);
    }


    public static void main(String[] args) throws Exception {
        new Main().mainGo();
    }
}


// -------------------------Other classes-------------------------

class Pair {

    int first = 0;
    int second = 0;
    // char first = 'a';
    // int second = -1;

    Pair(int x, int y) {
        first = x;
        second = y;
    }

    // Pair(char x, int y) {
    // first = x;
    // second = y;
    // }

}

class NewComparatorPair implements Comparator<Pair> {
    public int compare(Pair p1, Pair p2) {
        if (p1.first != p2.first)
            return Integer.compare(p1.first, p2.first);
        else
            return Integer.compare(p2.second, p1.second);
    }
}

class NewComparatorArray implements Comparator<int[]> {
    public int compare(int[] a, int[] b) {
        return Integer.compare(b[1], a[1]);
    }
}

// to sort arraylist        Collections.sort(arr ,  new NewComparatorPair());
