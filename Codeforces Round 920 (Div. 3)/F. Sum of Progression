#include "bits/stdc++.h"
using namespace std;

#ifdef LOCAL
#include "debug.h"
#else
#define debug(...)
#endif

using ll = long long;
using pii = pair<int, int>;

#define F first
#define S second
#define sz(x) (int)((x).size())
#define all(x) (x).begin(), (x).end()

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
ll get_rand(ll l, ll r) {
    assert(l <= r);
    return uniform_int_distribution<ll> (l, r)(rng);
}

const int N = 1e5 + 3;
const int S = 320;

int n, q;
ll a[N], p1[S][N], p2[S][N];

void solve(){
    cin >> n >> q;
    for(int i = 1; i <= n; ++i)
        cin >> a[i];

    // precalc for d < S
    for(int d = 1; d < S; ++d){
        for(int i = 1; i <= n; ++i){
            p1[d][i] = a[i];
            p2[d][i] = 1ll * ((i + d - 1) / d) * a[i];
            if(i > d){
                p1[d][i] += p1[d][i - d];
                p2[d][i] += p2[d][i - d];
            }
            // if(d < 4)
            //     debug(d, i, p1[d][i], p2[d][i]);
        }
    }

    while(q--){
        int s, d, k;
        cin >> s >> d >> k;
        if(d >= S){
            ll cnt = 1, res = 0;
            for(int i = s; cnt <= k; ++cnt, i += d)
                res += a[i] * cnt;
            cout << res << ' ';
        }
        else{
            int l = s, r = s + d * (k - 1);
            ll res = p2[d][r] - p2[d][l] + 1ll * ((l + d - 1) / d) * a[l];
            ll rem = p1[d][r] - p1[d][l] + 1ll * a[l];
            rem *= 1ll * ((l + d - 1) / d - 1);
            //debug(l, r, res, rem);
            cout << res - rem << ' ';
        }
    }
    cout << "\n";
}

int32_t main() {
    cin.tie(nullptr)->sync_with_stdio(0);
    #define task "troll"
    if(fopen(task".inp", "r")){
        freopen(task".inp", "r", stdin);
        freopen(task".out", "w", stdout);
    }
    int test = 1;
    cin >> test;
    for(int i = 1; i <= test; ++i){
//        cout << "Case #" << i << ": ";
        solve();
    }
    #ifdef LOCAL
        cerr << "\n[Time]: " << 1000.0 * clock() / CLOCKS_PER_SEC << " ms.\n";
    #endif
    return 0;
}
